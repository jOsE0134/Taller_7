# -*- coding: utf-8 -*-
"""TALLER#7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NRFBl1d_7gyfXCCQkQSa_nF_s12OCuWK
"""

class Nodo:
    def __init__(self, dato=None):
        self.dato = dato
        self.siguiente = None

def tiene_ciclo(cabeza):
    if cabeza is None:
        return False

    bicicleta = cabeza
    moto = cabeza

    while moto is not None and moto.siguiente is not None:
        bicicleta = bicicleta.siguiente
        moto = moto.siguiente.siguiente

        if bicicleta == moto:
            return True

    return False
#lista enlazada sin ciclo
nodo1 = Nodo(1)
nodo2 = Nodo(2)
nodo3 = Nodo(3)
nodo1.siguiente = nodo2
nodo2.siguiente = nodo3

print(tiene_ciclo(nodo1))  #False

#lista enlazada con ciclo
nodo1 = Nodo(1)
nodo2 = Nodo(2)
nodo3 = Nodo(3)
nodo1.siguiente = nodo2
nodo2.siguiente = nodo3
nodo3.siguiente = nodo1

print(tiene_ciclo(nodo1))  #True

def encontrar_duplicado(numeros):

    tortuga = numeros[0]
    liebre = numeros[0]
    while True:
        tortuga = numeros[tortuga]
        liebre = numeros[numeros[liebre]]
        if tortuga == liebre:
            break

    # Fase de búsqueda
    puntero1 = numeros[0]
    puntero2 = tortuga
    while puntero1 != puntero2:
        puntero1 = numeros[puntero1]
        puntero2 = numeros[puntero2]

    return puntero1

#lista de números con al menos un número repetido
numeros = [3, 1, 3, 4, 2]

# Encontrar el número repetido en la lista
print(encontrar_duplicado(numeros))